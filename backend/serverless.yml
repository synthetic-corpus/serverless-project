service:
  name: sans-server-todo-app-jtg72006

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-offline
  - serverless-DynamoDB-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  environment:
    PHOTO_BUCKET: sans-server-todo-jtg72006-${self:provider.stage}
    TODOS_TABLE: Todos-${self:provider.stage}
    INDEX_NAME: TodoIDindex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}/*

custom:
  serverless-offline:
    port: 3003
  documentation:
    api:
      info:
        version: v0.1.0
        title: JTG Todo
        description: Serverless application for things todo.



functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  # Needs IAM permissions to access Buckets/Databases
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

  # TODO: Configure this function
  # Needs IAM permissions to access Buckets/databases
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true

  # TODO: Configure this function
  # Needs IAM permissions to access Buckets/databases
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true

  # TODO: Configure this function
  # Needs IAM permissions to access Buckets/databases
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true

  # TODO: Configure this function
  # Needs IAM permissions to access Buckets/Databases
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    # An S3 Bucket
    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PHOTO_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Phtobucket-Policy-1
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}/*'
        Bucket: !Ref PhotoBucket

    # A Dynamo Database probably
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
          AttributeDefinitions:
            - AttributeName: partitionKey
              AttributeType: S
            - AttributeName: sortKey
              AttributeType: S
            - AttributeName: indexKey
              AttributeType: S
          KeySchema:
            - AttributeName: partitionKey
              KeyType: HASH
            - AttributeName: sortKey
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.TODOS_TABLE}
          LocalSecondaryIndexes:
            - IndexName: ${self:provider.environment.INDEX_NAME}
              KeySchema:
                - AttributeName: partitionKey
                  KeyType: HASH
                - AttributeName: indexKey
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL
    

    # Autho Secret probly